pragma solidity ^0.4.24;

import "../coffeeaccesscontrol/FarmerRole.sol";
import "../coffeeaccesscontrol/DistributorRole.sol";
import "../coffeeaccesscontrol/RetailerRole.sol";
import "../coffeeaccesscontrol/ConsumerRole.sol";

contract SupplyChain is FarmerRole,DistributorRole,RetailerRole,ConsumerRole {

address owner;
uint  upc;
uint  sku;

mapping (uint => Item) items;
mapping (uint => string[]) itemsHistory;

enum State 
{ 
Harvested,  // 0
Processed,  // 1
Packed,     // 2
ForSale,    // 3
Sold,       // 4
Shipped,    // 5
Received,   // 6
Purchased   // 7
}

State constant defaultState = State.Harvested;

struct Item {
uint    sku;  // Stock Keeping Unit (SKU)
uint    upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
address originFarmerID; // Metamask-Ethereum address of the Farmer
string  originFarmName; // Farmer Name
string  originFarmInformation;  // Farmer Information
string  originFarmLatitude; // Farm Latitude
string  originFarmLongitude;  // Farm Longitude
uint    productID;  // Product ID potentially a combination of upc + sku
string  productNotes; // Product Notes
uint    productPrice; // Product Price
State   itemState;  // Product State as represented in the enum above
address distributorID;  // Metamask-Ethereum address of the Distributor
address retailerID; // Metamask-Ethereum address of the Retailer
address consumerID; // Metamask-Ethereum address of the Consumer
}

event Harvested(uint upc);
event Processed(uint upc);
event Packed(uint upc);
event ForSale(uint upc);
event Sold(uint upc);
event Shipped(uint upc);
event Received(uint upc);
event Purchased(uint upc);

modifier onlyOwner() {
	require(msg.sender == owner);
	_;
}

modifier verifyCaller (address _address) {
	require(msg.sender == _address); 
	_;
}

modifier paidEnough(uint _price) { 
	require(msg.value >= _price); 
	_;
}

modifier checkValue(uint _upc) {
	_;
	uint _price = items[_upc].productPrice;
	uint amountToReturn = msg.value - _price;
	items[_upc].consumerID.transfer(amountToReturn);
}

modifier harvested(uint _upc) {
	require(items[_upc].itemState == State.Harvested);
	_;
}

modifier processed(uint _upc) {
	require(items[_upc].itemState== State.Processed);
	_;
}

modifier packed(uint _upc) {
	require(items[_upc].itemState== State.Packed);
	_;
}

modifier forSale(uint _upc) {
	require(items[_upc].itemState== State.ForSale);
	_;
}

modifier sold(uint _upc) {
	require(items[_upc].itemState== State.Sold);
	_;
}

modifier shipped(uint _upc) {
	require(items[_upc].itemState== State.Shipped);
	_;
}

modifier received(uint _upc) {
	require(items[_upc].itemState== State.Received);
	_;
}

modifier purchased(uint _upc) {
	require(items[_upc].itemState== State.Purchased);
	_;
}

constructor() public payable {
	owner = msg.sender;
	sku = 1;
	upc = 1;
}

function kill() public {
	if (msg.sender == owner) {
		selfdestruct(owner);
	}
}

 
function harvestItem(uint _upc, address _originFarmerID, string _originFarmName, string _originFarmInformation, string  _originFarmLatitude, string  _originFarmLongitude, string  _productNotes) onlyFarmer() public 
{
	items[_upc]=Item({ sku:sku,upc:_upc,ownerID:_originFarmerID,originFarmerID:_originFarmerID,originFarmName:_originFarmName,originFarmInformation:_originFarmInformation,originFarmLatitude:_originFarmLatitude,originFarmLongitude:_originFarmLongitude,productID:sku+upc,productNotes:_productNotes,productPrice:0,itemState:State.Harvested,distributorID:0,retailerID:0,consumerID:0});
	sku = sku + 1;
	emit Harvested(_upc);
}

function processItem(uint _upc) harvested(_upc) verifyCaller(owner) public
{
	items[_upc].itemState = State.Processed;	
	emit Processed(_upc);
}

function packItem(uint _upc) processed(_upc) verifyCaller(owner) public 
{
	items[_upc].itemState = State.Packed;
	emit Packed(_upc);
}

function sellItem(uint _upc, uint _price) packed(_upc) verifyCaller(owner) public 
{
	items[_upc].itemState = State.ForSale;
	items[_upc].productPrice = _price;

	emit ForSale(_upc);
}

function buyItem(uint _upc,uint _price) forSale(_upc) paidEnough(_price) checkValue(_upc)  public payable 
{
	items[_upc].ownerID = msg.sender;
	items[_upc].distributorID = msg.sender;
	items[_upc].itemState = State.Sold;

	msg.sender.transfer(_price);

	emit Sold(_upc);
}

function shipItem(uint _upc)  onlyDistributor() public 
{
	items[_upc].itemState = State.Shipped;

	emit Shipped(_upc);
}

function receiveItem(uint _upc) shipped(_upc) onlyRetailer() public 
{
	items[_upc].retailerID = msg.sender;
	items[_upc].ownerID = msg.sender;
	items[_upc].itemState = State.Received;

	emit Received(_upc);
}

function purchaseItem(uint _upc) received(upc) onlyConsumer() public 
{
	items[_upc].ownerID = msg.sender;
	items[_upc].consumerID = msg.sender;
	items[_upc].itemState = State.Purchased;

	emit Purchased(_upc);
}

function fetchItemBufferOne(uint _upc) public view returns 
(
	uint    itemSKU,
	uint    itemUPC,
	address ownerID,
	address originFarmerID,
	string  originFarmName,
	string  originFarmInformation,
	string  originFarmLatitude,
	string  originFarmLongitude
) 
{
	itemSKU = items[_upc].sku;
	itemUPC = items[_upc].upc;
	ownerID = items[_upc].ownerID;
	originFarmerID = items[_upc].originFarmerID;

	originFarmName = items[_upc].originFarmName;
	originFarmInformation = items[_upc].originFarmInformation;
	originFarmLatitude = items[_upc].originFarmLatitude;
	originFarmLongitude = items[_upc].originFarmLongitude;

	return (itemSKU, itemUPC, ownerID, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude);
}

function fetchItemBufferTwo(uint _upc) public view returns 
(
	uint    itemSKU,
	uint    itemUPC,
	uint    productID,
	string  productNotes,
	uint    productPrice,
	uint    itemState,
	address distributorID,
	address retailerID,
	address consumerID
	) 
{
	itemSKU = items[_upc].sku; 
	itemUPC = items[_upc].upc; 
	productID = items[_upc].productID; 
	productNotes = items[_upc].productNotes; 

	productPrice = items[_upc].productPrice; 
	itemState = uint(items[_upc].itemState); 
	distributorID = items[_upc].distributorID;
	retailerID = items[_upc].retailerID; 
	consumerID = items[_upc].consumerID; 

	return (itemSKU, itemUPC, productID, productNotes, productPrice, itemState, distributorID, retailerID, consumerID);
}
}
